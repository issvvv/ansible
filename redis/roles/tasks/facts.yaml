---
- name: Verify configuration
  ansible.builtin.assert:
    that:
      - redis_server_instance_type == 'replication'
    fail_msg: "Wrong configuration: Sentinel is only compatible with 'replication' mode."
  when: redis_server_sentinel_enabled | bool

- name: Gather service facts
  ansible.builtin.gather_facts:

- name: Check if Redis is already installed
  ansible.builtin.set_fact:
    redis_server_is_installed: "{{ 'redis-server.service' in ansible_facts.services }}"

- name: Check current Redis version
  ansible.builtin.command: "{{ redis_server_bin_dir }}/redis-server --version"
  changed_when: false
  failed_when: false
  check_mode: false
  register: redis_server_current_version_raw
  when: redis_server_is_installed

- name: Extract current Redis version
  ansible.builtin.set_fact:
    redis_server_current_version: "{{ redis_server_current_version_raw | regex_search('v=([0-9.+])', '\\1') }}"
  when: redis_server_is_installed

- name: Check current Redis instance type
  ansible.builtin.set_fact:
    redis_server_previous_instance_type: "{{ lookup('file', '{{ redis_server_root_dir }}/current_instance_type.txt', errors='ignore') | trim }}"
  when: redis_server_is_installed

- name: Info message about standalone installation
  ansible.builtin.debug:
    msg: >
      "⚠️ This playbook will setup standalone configuration on all hosts from 'redis_master' and 'redis_slave' groups
      because redis_server_instance_type variable is set to 'standalone'."
  when: redis_server_instance_type == 'standalone'
  run_once: true

- name: Be sure dependencies installed
  become: true
  ansible.builtin.package:
    name: "{{ item }}"
  with_items: "{{ redis_server_build_dependencies_packages }}"
